--------------------------------------------------------命令行dir     列出当前目录下的所以内容cd  目录  进入某个目录.       当前目录..      上一级目录md 目录名    创建文件夹rd           删除文件夹输入文件名   打开文件c:      进入C盘d:e:f:----------------------------------------------------------------------------------------------------------------进程和线程    进程        - 进程负责为程序的运行提供必备的环境        - 相当于工厂中的车间    线程        - 线程是计算机的最小的计算单位，负责执行进程中的程序        - 相当于工厂中的工人    单线程        - js，浏览器是单线程    多线程        - java----------------------------------------------------------------------------------------------------------------javascript    - 在浏览器中运行node.js      Ryan Dahl——瑞安 达尔   2009年2月web.js    - 能在服务器端运行javascript    - 采用Google开发的V8引擎运行js代码    - 使用事件驱动、非阻塞和异步I/O高并发性能问题：同一时间有巨大的访问量--------------------------------------------------------模块标识：使用require()引入外部模块时，使用的就是模块标识（路径），我们通过模块标识来找到指定的模块模块标识分为两大类：	核心模块：		* 由node引擎提供的模块		* 核心模块的标识就是模块的名字		* var fs = require("fs");	文件模块：		* 由用户自己创建的模块		* 就是文件的路径global：node中的全局对象，类似于网页中的window		* 在全局中创建的变量都会作为global的属性保存		* 在全局中创建的函数都会作为global的方法保存arguments.callee	* 这个属性保存的是当前函数对象模块js实际是包装在一个函数内部 	* console.log(arguments.callee+'')：可以打印模块js文件中最外层的函数	 	* 该函数有5个参数 		- exports：用来将变量或函数暴露到外部 		- require：函数，用来引入外部的模块 		- module：代表当前模块本身，是一个对象{} 			+ exports就是module的属性 			+ module.exports === exports 		- __filename：当前模块的一个完整路径 		- __dirname：当前模块所在文件夹的路径module.exports = {}：可以以对象的形式向外暴露exports：只能通过点的方式来向外暴露内部变量或方法解析：	var obj = {};	obj.a = {};	var a = obj.a;	//a和obj.a指向的是同一个对象	console.log(a == obj.a)	//true	a.name = "zyh";	a = {};	//此处a的内部已改变	console.log(obj.a.name)	//zyh	console.log(a.name)		//undefined