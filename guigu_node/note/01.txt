命令行dir     列出当前目录下的所以内容cd  目录  进入某个目录.       当前目录..      上一级目录md 目录名    创建文件夹rd           删除文件夹输入文件名   打开文件c:      进入C盘d:e:f:--------------------------------------------------------进程和线程    进程        - 进程负责为程序的运行提供必备的环境        - 相当于工厂中的车间    线程        - 线程是计算机的最小的计算单位，负责执行进程中的程序        - 相当于工厂中的工人    单线程        - js，浏览器是单线程    多线程        - java--------------------------------------------------------javascript    - 在浏览器中运行node.js      Ryan Dahl——瑞安 达尔   2009年2月web.js    - 能在服务器端运行javascript    - 采用Google开发的V8引擎运行js代码    - 使用事件驱动、非阻塞和异步I/O高并发性能问题：同一时间有巨大的访问量--------------------------------------------------------node执行js文件    * 进入文件目录    * node+js文件名--------------------------------------------------------06 module模块化 低耦合在node中一个js就是一个模块通过require() 函数来引入外部的模块，可以传递一个文件的路径作为参数，如果使用相对路径，必须以./或../开头    * var md = require(./module.js)使用require()引入模块后，该函数会返回一个对象，这个对象代表的是引入的模块在node中，每一个js文件的js代码都是独立运行在一个函数中，而不是全局作用域，所以一个模块中的变量和函数在其他模块中无法访问    使用exports来向外部暴露属性和方法    只需要将需要暴露给外部的变量或方法设置为exports的属性即可    *  exports.x = 1    *  exports.y = 'hello'    *  exports.fn = function(){}--------------------------------------------------------07 模块标识：使用require()引入外部模块时，使用的就是模块标识（路径），我们通过模块标识来找到指定的模块模块标识分为两大类：	核心模块：		* 由node引擎提供的模块		* 核心模块的标识就是模块的名字		* var fs = require("fs");	文件模块：		* 由用户自己创建的模块		* 就是文件的路径global：node中的全局对象，类似于网页中的window		* 在全局中创建的变量都会作为global的属性保存		* 在全局中创建的函数都会作为global的方法保存arguments.callee	* 这个属性保存的是当前函数对象模块js实际是包装在一个函数内部 	* console.log(arguments.callee+'')：可以打印模块js文件中最外层的函数	 	* 该函数有5个参数 		- exports：用来将变量或函数暴露到外部 		- require：函数，用来引入外部的模块 		- module：代表当前模块本身，是一个对象{} 			+ exports就是module的属性 			+ module.exports === exports 		- __filename：当前模块的一个完整路径 		- __dirname：当前模块所在文件夹的路径--------------------------------------------------------08module.exports = {}：可以以对象的形式向外暴露exports：只能通过点的方式来向外暴露内部变量或方法解析：	var obj = {};	obj.a = {};	var a = obj.a;	//a和obj.a指向的是同一个对象	console.log(a == obj.a)	//true	a.name = "zyh";	a = {};	//此处a的内部已改变	console.log(obj.a.name)	//zyh	console.log(a.name)		//undefined--------------------------------------------------------09 package* json文件内不能写注释--------------------------------------------------------10 npm（Node Package Manager）    node包管理器npm帮助node完成了第三方模块的发布、安装和依赖npm -v                  查看npm版本npm version             查看所有模块的版本npm search 包名         搜索包npm install/i 包名      在当前目录安装包模块    install可以简写成inpm install 包名 -g     全局模式安装包（全局安装的包一般都是一些工具，一般不在项目中使用）npm install 包名 --save 安装包并添加到package.json里的dependencies依赖中npm install             会安装所有在package.json里的dependencies依赖中的包npm uninstall xxx	删除npm init                创建package.jsonnpm remove/r  包名      删除包--------------------------------------------------------11 配置cnpm 安装npm淘宝镜像npm install -g cnpm --registry=https://registry.npm.taobao.org--------------------------------------------------------12 node搜索包的流程    * node在使用模块名字来引入模块时，它会首先在当前目录的node_modules中寻找是否含有该模块    * 如果有则直接使用，如果没有则去上一级目录的node_modules中寻找    * 如果有则使用，如果没有则再去上一级目录寻找，直到找到为止    * 直到找到磁盘的根目录，如果没有找到，则报错    * 类似于闭包中变量的查找--------------------------------------------------------13 Buffer缓冲区    * buffer的结构和数组类似，操作的方法也和数组类似    * 二进制文件：图片、MP3、视频    * 数组中不能存储二进制的文件，而buffer就是专门用来存储二进制数据    * 使用buffer不需要引入模块    * var buf = Buffer.from(str) ：将字符串转换为buffer；存储的都是二进制数据，但是显示时都是以16进制的形式显示    * buffer中每个元素的范围是从 00 - ff  0 - 255  00000000 - 11111111        计算机中一个0或者一个1 我们称为1位（bit）        8bit = 1 byte(字节)        buffer中一个字母，占用内存的一个字节        一个汉字占用三个字节    * 创建buffer：var buf = Buffer.alloc(10);  创建一个10字节的buffer                  var buf2 = Buffer.allocUnsafe(size)   创建一个指定大小的buffer，但是可能包含敏感数据    * Buffer的大小一旦确定，则不能修改，buffer是对底层内存的直接操作    * 取：buf[index]；只要数字在控制台或页面输出一定是10进制--------------------------------------------------------